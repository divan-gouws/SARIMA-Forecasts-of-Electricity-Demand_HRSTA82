?save
renv::activate()
renv::init()
# dependencies of this script
list.of.packages <- c('xts')
# load all dependent packages
lapply(list.of.packages, require, character.only = TRUE)
# set working directory and load the data
setwd("C:/Users/gouws/Google Drive/UNISA/HRSTA82 - Research Project in Statistics/Research Project/SARIMA_forecasts")
elec_df <- read.table("./data/StatsSA_Electricity_GWh.csv", sep = ",",
header = TRUE, fileEncoding="UTF-8-BOM",
stringsAsFactors = FALSE, row.names = 'Month')
# remove 'MO' from index and prepend 01 as a default day to enable conversion to date
rownames(elec_df) <- paste("01", substr(rownames(elec_df), 3, 10), sep = "")
# convert to xts object
elec_xts <- xts(elec_df, order.by = as.Date(rownames(elec_df), format="%d%m%Y"))
install.packages("xts")
# dependencies of this script
list.of.packages <- c('xts')
# load all dependent packages
lapply(list.of.packages, require, character.only = TRUE)
# set working directory and load the data
setwd("C:/Users/gouws/Google Drive/UNISA/HRSTA82 - Research Project in Statistics/Research Project/SARIMA_forecasts")
elec_df <- read.table("./data/StatsSA_Electricity_GWh.csv", sep = ",",
header = TRUE, fileEncoding="UTF-8-BOM",
stringsAsFactors = FALSE, row.names = 'Month')
# remove 'MO' from index and prepend 01 as a default day to enable conversion to date
rownames(elec_df) <- paste("01", substr(rownames(elec_df), 3, 10), sep = "")
# convert to xts object
elec_xts <- xts(elec_df, order.by = as.Date(rownames(elec_df), format="%d%m%Y"))
?plotmath
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
# plot seasonal differences
plot(diff(elec_xts, lag = 12))
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/02_eda.r')
# plot
plot(elec_xts, main = "", xlab = "", ylab = "")
# plot seasonal differences
plot(diff(elec_xts, lag = 12))
seasonal_differenced <- diff(elec_xts, lag = 12)
acf(seasonal_differenced)
acf(as.vector(seasonal_differenced), lag.max=60, ci.type='ma')
seasonal_differenced
# plot
plot(elec_xts, main = "", xlab = "", ylab = "")
autoplot.zoo(elec_xts)
install.packages('ggplot2')
autoplot.zoo(elec_xts)
# plot
plot(elec_xts, main = "", xlab = "", ylab = "")
abline(v = as.Date('2015-01-01'))
abline(v = as.Date('2015-01-01'), lty = 1, lwd = 1)
abline(v = as.Date('2015-01-01'), lty = 2, lwd = 2)
# plot
plot(elec_xts, main = "", xlab = "", ylab = "") + + geom_vline(xintercept = as.Date("2015-01-01"))
# plot
plot(elec_xts, main = "", xlab = "", ylab = "") + geom_vline(xintercept = as.Date("2015-01-01"))
as.Date("2015-01-01")
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
install.packages("tseries")
install.packages("TSA")
install.packages("fpp2")
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
BoxCox(elec_first)
BoxCox(as.vector(elec_first))
boxCox(elec_first)
install.packages("car")
a
library(car)
boxCox(elec_first)
boxCox(as.vector(elec_first))
?auto.arima
auto.arima(elec_first)
?aicc
??aicc
# ACF and PACF
ggAcf(elec_first) + ggtitle("Sample ACF for electricity data")
ggPacf(elec_first) + ggtitle("Sample PACF for electricity data")
plot(diff(elec_first, lag=12))
plot(elec_first)
mean(diff(elec_first, lag=12))
mdl <- arima(elec_first, order=c(1, 0, 0), seasonal = list(order=c(0, 1, 1)))
mdl <- arima(elec_first, order=c(1, 0, 0), seasonal = list(order=c(0, 1, 1)), period=12)
mdl <- arima(elec_first, order=c(1, 0, 0), seasonal = list(order=c(0, 1, 1), period=12))
mdl1
mdl
plot(window(rstandard(m1.co2),
ylab='Standardized Residuals',type='o')
)
plot(window(rstandard(mdl),
ylab='Standardized Residuals',type='o'))
plot(window(rstandard(mdl),start=c(2011, 1)
ylab='Standardized Residuals',type='o'))
plot(window(rstandard(mdl),start=c(2011, 1),
ylab='Standardized Residuals',type='o'))
mean(window(rstandard(mdl),start=c(2011, 1)))
acf(window(rstandard(mdl),start=c(2011, 1),
ylab='Standardized Residuals',type='o'))
acf(as.vector(window(rstandard(mdl),start=c(2011, 1))), lag.max = 36)
acf(as.vector(window(rstandard(mdl),start=c(2011, 1))), lag.max = 60)
qqnorm(window(rstandard(mdl),start=c(2011, 1)))
qqline(window(rstandard(mdl),start=c(2011, 1)))
install.packages("seastests")
library(seastests)
?seastests
??seastests
install.packages("uroot")
library(uroot)
hegy.test(elec_first)
hegy.test(elec_first, lag.method = c("AIC"), maxlag = 12)
hegy.test(elec_first, deterministic = c(1, 1, 1), lag.method = c("AIC"), maxlag = 12)
HEGY.testocsb.test(elec_first, lag.method = c("AIC"), maxlag = 12)
ocsb.test(elec_first, lag.method = c("AIC"), maxlag = 12)
ocsb.test(elec_first, lag.method = c("fixed"), maxlag = 12)
ch.test(elec_first)
OCSBtest(elec_first)
library(forecast)
OCSBtest(elec_first)
hegy.test(elec_first, deterministic = c(1, 0, 1), lag.method = c("AIC"), maxlag = 12)
hegy.test(elec_first, deterministic = c(1, 1, 1), lag.method = c("AIC"), maxlag = 12)
hegy.test(elec_first, deterministic = c(1, 0, 1), lag.method = c("AIC"), maxlag = 12)
hegy.test(elec_first, deterministic = c(1, 0, 1), lag.method = c("BIC"), maxlag = 12)
hegy.test(elec_first, deterministic = c(1, 0, 1), lag.method = c("fixed"), maxlag = 12)
hegy.test(elec_first, deterministic = c(0, 0, 1), lag.method = c("fixed"), maxlag = 12)
?hegy.test
hegy.test(elec_first, deterministic = c(1,0,1))
ch.test(elec_first, type = "dummy", sid = 12)
?ch.test
?bptest
?BoxCox
?BoxCox.ar
BoxCox.ar(elec_first)
BoxCox.ar(elec_first-mean(elec_first))
?white.test
BoxCox.ar(elec_first, method = "Nelder-Mead", hessian = FALSE)
BoxCox.ar(elec_first, hessian = FALSE)
BoxCox.ar(elec_first, method = "burg", hessian = FALSE)
BoxCox.ar(elec_first, method = "ols", hessian = FALSE)
BoxCox.ar(elec_first, method = "burg", hessian = TRUE)
BoxCox.ar(elec_first, lambda = seq(0.2, 1.5, 0.01))
BoxCox.ar(elec_first, lambda = seq(0.2, 2.5, 0.01))
BoxCox.ar(elec_first, lambda = seq(0.2, 5, 0.01))
# plot
autoplot(elec_first, main = "Electricity demand in South Africa", xlab = "Time", ylab = "Gigawatt-hours")
?autoplot
# plot
autoplot(elec_first, main = "Electricity demand in South Africa", xlab = "Month", ylab = "Gigawatt-hours")
# plot
autoplot(elec_first, main = "Electricity demand in South Africa", xlab = "Year", ylab = "Gigawatt-hours")
ggseasonplot(elec_first)
ggseasonplot(elec_first, main = "Electricity demand in South Africa", xlab = "Year", ylab = "Gigawatt-hours")
ggseasonplot(elec_first, main = "Seasonal plot of electricity demand in South Africa", xlab = "Year", ylab = "Gigawatt-hours")
# descriptives
mean(elec_first)
sd(elec_first)
sd(elec_first)^2
var(elec_first)
?ggesacf
# ACF and PACF
ggAcf(elec_first) + ggtitle("Sample ACF for electricity data")
# ACF and PACF
ggAcf(elec_first) + ggtitle("Sample ACF for electricity consumption")
ggPacf(elec_first) + ggtitle("Sample PACF for electricity consumption")
# periodogram
periodogram(elec_first)
?periodogram
per <- periodogram(elec_first)
per$spec
per$freq
which(max(per$spec))
max(per$spec)
which.max(per$spec)
per$spec[5]
per$freq[5]
1/per$freq[5]
options(scipen = 999)
# periodogram
periodogram(elec_first, main)
# plot
autoplot(elec_first, main = "", xlab = "Year", ylab = "Gigawatt-hours")
ggseasonplot(elec_first, main = "", xlab = "Year", ylab = "Gigawatt-hours")
# ACF and PACF
ggAcf(elec_first)
# ACF and PACF
ggAcf(elec_first) + ggtitle("")
ggPacf(elec_first) + ggtitle("")
# periodogram
periodogram(elec_first)
cov(elec_first)
acf(elec_first)
acf(elec_first, plot = FALSE)
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
?ggseasonplot
ggseasonplot(elec_first, main = "", xlab = "Year", ylab = "Gigawatt-hours")
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
ggseasonplot(elec_first, main = "", xlab = "Year", ylab = "Gigawatt-hours")
ggseasonplot(elec_first, 6, main = "", xlab = "Year", ylab = "Gigawatt-hours")
seasonal_differenced <- diff(elec_first, lag = 12)
# plot
autoplot(seasonal_differenced, main = "", xlab = "Year", ylab = "Gigawatt-hours")
ggseasonplot(seasonal_differenced, main = "", xlab = "Year", ylab = "Gigawatt-hours")
# descriptives
mean(seasonal_differenced)
sd(seasonal_differenced)
# ACF and PACF
ggAcf(seasonal_differenced) + ggtitle("")
ggPacf(seasonal_differenced) + ggtitle("")
# periodogram
periodogram(seasonal_differenced)
ggAcf(seasonal_differenced) + ggtitle("")
ggPacf(seasonal_differenced) + ggtitle("")
# Use the auto arima to select the model with the lowest AIC
automod <- auto.arima(elec_first)
automod
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 1, 3),
seasonal=list(order=c(1, 1, 1), period=12))
model1
?auto.arima
# Use the auto arima to select the model with the lowest AIC
automod <- auto.arima(elec_first, ic="AIC")
# Use the auto arima to select the model with the lowest AIC
automod <- auto.arima(elec_first, ic="aic")
automod
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model2 <- arima(elec_first,order=c(1, 1, 4),
seasonal=list(order=c(1, 1, 1), period=12))
model2
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model2 <- arima(elec_first,order=c(1, 1, 2),
seasonal=list(order=c(1, 1, 1), period=12))
model2
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model2 <- arima(elec_first,order=c(1, 1, 1),
seasonal=list(order=c(1, 1, 1), period=12))
model2
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 1, 3),
seasonal=list(order=c(1, 1, 1), period=12))
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 0, 3),
seasonal=list(order=c(1, 1, 1), period=12))
model1
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 0, 2),
seasonal=list(order=c(1, 1, 1), period=12))
model1
# Use the auto arima to select the model with the lowest AIC
automod <- auto.arima(elec_first, ic="aicc")
automod
# Use the auto arima to select the model with the lowest AIC
automod <- auto.arima(elec_first, ic="bic")
automod
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 0, 2),
seasonal=list(order=c(0, 1, 1), period=12))
model1
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 0, 3),
seasonal=list(order=c(0, 1, 1), period=12))
model1
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 0, 1),
seasonal=list(order=c(0, 1, 1), period=12))
model1
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 0, 0),
seasonal=list(order=c(0, 1, 1), period=12))
model1
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
# seasonally differenced series
seasonal_differenced <- diff(elec_first, lag = 12)
k <- c(1:12)
BoxFunction <- function(k){Box.test(elec_first, lag = k, type = "Ljung-Box")}
lapply(k, BoxFunction)
model1 <- arima(elec_first,order=c(1, 1, 3),
seasonal=list(order=c(1, 1, 1), period=12))
model1
?hqic
summary(model1)
?arima
?auto.arima
auto.arima(elec_first)
model1 <- arima(elec_first,order=c(1, 0, 0),
seasonal=list(order=c(0, 1, 1), period=12))
arima(elec_first,order=c(1, 0, 0),
seasonal=list(order=c(0, 1, 1), period=12))
BIC(model1)
AIC(model1)
model$aic
model1$aic
?AIC
model1$n.cond
AICC
AICc
install.packages("MuMIn")
library(MuMIn)
AICc(model1)
?AICc
?accuracy
accuracy(model1)
class(model1)
Box.test(elec_first, lag = 24, type = "Ljung-Box")
checkresiduals(model1)
fitted(model1)
# dependencies of this script
list.of.packages <- c('tseries', 'ggplot2', 'fpp2', 'forecast', 'uroot', 'MuMIn')
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
# appears as though AR 1 and 12. MA 1,2,3,12,13,14
model1 <- arima(elec_first,order=c(1, 0, 0),
seasonal=list(order=c(0, 1, 1), period=12))
model1
AIC(model1)
auto.arima(model1)
auto.arima(elec_first)
accuracy(model1)
AICc(model1)
source('~/Documents/Repo/HRSTA82_SARIMA_Forecasts/r/01_data_preparation.r')
# seasonally differenced series
seasonal_differenced <- diff(elec_first, lag = 12)
# plot
autoplot(seasonal_differenced, main = "", xlab = "Year", ylab = "Gigawatt-hours")
# ACF and PACF
ggAcf(seasonal_differenced) + ggtitle("")
ggPacf(seasonal_differenced) + ggtitle("")
model1 <- arima(elec_first,order=c(1, 0, 1),
seasonal=list(order=c(0, 1, 1), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(1, 0, 0),
seasonal=list(order=c(1, 1, 1), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(1, 0, 2),
seasonal=list(order=c(0, 1, 1), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(1, 0, 2),
seasonal=list(order=c(1, 1, 1), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(1, 0, 2),
seasonal=list(order=c(1, 1, 2), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(1, 0, 3),
seasonal=list(order=c(1, 1, 1), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(1, 0, 0),
seasonal=list(order=c(0, 1, 2), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(1, 0, 1),
seasonal=list(order=c(1, 1, 1), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(1, 0, 0),
seasonal=list(order=c(0, 1, 1), period=12))
model1
summary(model1)
?Box.test
# dependencies of this script
list.of.packages <- c('tseries', 'ggplot2', 'fpp2', 'forecast', 'uroot', 'MuMIn', 'lmtest')
# load all dependent packages
lapply(list.of.packages, require, character.only = TRUE)
lmtest(model1)
,jb
library(lmtest)
coeftest(model1)
library(caschrono)
install.packages("caschrono")
model1 <- arima(elec_first,order=c(0, 0, 0),
seasonal=list(order=c(0, 1, 1), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
model1 <- arima(elec_first,order=c(0, 0, 1),
seasonal=list(order=c(1, 1, 0), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
tsdiag(model1)
?tsdiag
model1 <- arima(elec_first,order=c(1, 0, 0),
seasonal=list(order=c(0, 1, 1), period=12))
AIC(model1)
BIC(model1)
AICc(model1)
accuracy(model1)
coeftest(model1)
tsdiag(model1)
tsdiag(model1, gof.lag = 12)
# Residual plot
plot(window(rstandard(model1), start=c(2010, 1)),
ylab='Standardized Residuals', type='o')
rstandard(model1)
# Residual plot
plot(window(residuals(model1), start=c(2010, 1)),
ylab='Standardized Residuals', type='o')
autoplot(residuals(model1))
autoplot(residuals(model1), main = "", xlab = "Year", ylab = "Gigawatt-hours")
abline(h=0)
autoplot(residuals(model1), main = "", xlab = "Year", ylab = "Gigawatt-hours") + geom_abline(h=0)
autoplot(residuals(model1), main = "", xlab = "Year", ylab = "Gigawatt-hours") + geom_hline(yintercept = 0)
autoplot(residuals(model1), main = "", xlab = "Year", ylab = "Gigawatt-hours") + geom_hline(yintercept = 0, lintype = 3)
autoplot(residuals(model1), main = "", xlab = "Year", ylab = "Gigawatt-hours") + geom_hline(yintercept = 0, linetype = 3)
autoplot(residuals(model1), main = "", xlab = "Year", ylab = "Gigawatt-hours") + geom_hline(yintercept = 0, linetype = 2)
# ACF of residuals
ggAcf(residuals(model1))
# ACF of residuals
ggAcf(residuals(model1)) + ggtitle("")
hist(residuals(model1))
?hist
lines(seq(-1000, 400, by=.5), dnorm(seq(-1000, 400, by=.5),
0, sd(residuals(model1))), col="blue")
hist(residuals(model1))
lines(seq(-1000, 400, by=.5), dnorm(seq(-1000, 400, by=.5),
0, sd(residuals(model1))), col="blue")
hist(residuals(model1), freq = FALSE)
lines(seq(-1000, 400, by=.5), dnorm(seq(-1000, 400, by=.5),
0, sd(residuals(model1))), col="blue")
hist(residuals(model1), freq = FALSE, breaks = 20)
hist(residuals(model1), freq = FALSE, breaks = 12)
lines(seq(-1000, 400, by=.5), dnorm(seq(-1000, 400, by=.5),
0, sd(residuals(model1))), col="blue")
hist(residuals(model1), freq = FALSE, breaks = 50)
lines(seq(-1000, 400, by=.5), dnorm(seq(-1000, 400, by=.5),
0, sd(residuals(model1))), col="blue")
hist(residuals(model1), freq = FALSE, breaks = 20)
lines(seq(-1000, 400, by=.5), dnorm(seq(-1000, 400, by=.5),
0, sd(residuals(model1))), col="blue")
hist(residuals(model1), freq = FALSE, breaks = 12)
lines(seq(-1000, 400, by=.5), dnorm(seq(-1000, 400, by=.5),
0, sd(residuals(model1))), col="blue")
# res must be normally distributed
shaprio.test(residuals(model1))
# res must be normally distributed
shapiro.test(residuals(model1))
sort(residuals(model1))
sort(residuals(model1)[1:])
type(residuals(model1))
class(residuals(model1))
subset(residuals(model1), start = 1)
subset(residuals(model1), start = 2)
subset(sort(residuals(model1)), start = 2)
as.list(residuals(model1))
as.vector(residuals(model1))
sort(as.vector(residuals(model1)))[1:]
sort(as.vector(residuals(model1)))
x<-sort(as.vector(residuals(model1)))
x[x> -800]
shapiro.test(x[x>-800])
no_outlier <- x[x>-800]
hist(no_outlier, main = "", xlab = "residuals", freq = FALSE, breaks = 12)
lines(seq(-1000, 400, by=.5), dnorm(seq(-1000, 400, by=.5), 0, sd(residuals(model1))), col="blue")
